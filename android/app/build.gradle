plugins {
    id "com.android.application"
    // id 'com.google.firebase.crashlytics'
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.challenge.pragma"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "25.1.8937393"//flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    defaultConfig {
        applicationId "com.challenge.pragma"
           // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

    }
    signingConfigs {
        release {
        keyAlias keystoreProperties['keyAlias'] 
        keyPassword keystoreProperties['keyPassword']
        storePassword keystoreProperties['storePassword'] 
        storeFile file(keystoreProperties['storeFile'] ?: "app/dummy_release_keystore.jks")
        }
    }
    buildTypes {

         debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.release
            minifyEnabled true
            shrinkResources true
        }
    }
     sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    flavorDimensions "default"
    productFlavors { 
        production {
            dimension "default"
            applicationIdSuffix ""
            signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "challenge"]
        }
        stg {
            dimension "default"
            applicationIdSuffix ".stg"
            signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "[STG] challenge"]
        }
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: "[DEV] challenge"]
        }
    }


}



flutter {
    source = "../.."
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.20"
    implementation 'com.google.android.gms:play-services-auth:20.7.0'

}

// apply plugin: 'com.google.gms.google-services'